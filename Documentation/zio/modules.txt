
This is the list of ZIO modules, at the time of writing. It is there
to help new users understanding how the parts stick together.

  drivers/zio/zio.ko

This module (which is linked from several source files) includes the
core sysfs and attribute management. It exports the register and
unregister functions for top-level objects. Moreover, it includes the
default buffer, called "kmalloc" and default trigger, called
"user".

  drivers/zio/trigger/zio-trig-timer.ko
  drivers/zio/trigger/zio-trig-irq.ko

Three other generic triggers. Two of them are time-based, and the
third hooks to an external interrupt (or more than one) as source of
trigger that can be used be any zio cset).

  drivers/zio/drivers/zio-zero.ko
  drivers/zio/drivers/zio-gpio.ko
  drivers/zio/drivers/zio-ad788x.ko

These modules are examples. The zero driver is an emulator of an
input/output device. It can be used to experiment with generic
triggers and as a sandbox for local modifications and testing.
It has 4 input channels and 1 output channel. Each of the 4 input
channel generates a particular waveform: a flat signal (zero), a white
noise signal, saw-tooth and a sequence of 32-bit little-endian numbers.
The last signal can be used for diagnostics and regression testing of
buffers. The output channel discards all samples.

The gpio driver register two single-channel csets: one for input the
other for output. The user specifies (on driver load, as module parameter)
which GPIOs use for input and which ones for output.

The ad788x driver handle two devices: the ad7887 and the ad7888.
Both devices are SPI ADC we mounted on an ARM board; ad788 is a
8-channel ADC and ad7887 is a 2-channel ADC with variable voltage
reference. We are using these devices for internal development, and this
is a real driver for a real thing. Over time it will handle its own buffer
type (our SPI master uses DMA) and its own data-driven trigger (even
if the data will be scanned by the CPU, so it can only work at low
data rates).
